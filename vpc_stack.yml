---
- name: setup vpc
  hosts: localhost
  connection: local
  tasks:
    - name: Import variables from vpc stack
      include_vars: vars/vpc_stack

    - name: Import variables from vpc stack
      include_vars: vars/output_var

    - name: Create ec2 key pair for the stack
      ec2_key:
         name: stack_keypair
         region: "{{region}}"
      register: keystackout

    - name: create private key file
      copy:
         content: "{{keystackout.key.private_key}}"
         dest: "./vpcstack_keypair.pem"
         mode: 0600

    - name: create ec2 security group for ELB
      ec2_group:
         name: ELB_sec
         description: ELB security group
         vpc_id: "{{vpc_id}}"
         region: "{{region}}"
         rules:
           - proto: tcp
             from_port: 80
             to_port: 80
             cidr_ip: 0.0.0.0/0
      register: elb_sec_grp

    - name: create ec2 security group for instances
      ec2_group:
         name: ec2_sec
         description: ec2 security group
         vpc_id: "{{vpc_id}}"
         region: "{{region}}"
         purge_rules: no
         rules:
           - proto: tcp
             from_port: 80
             to_port: 80
             group_id: "{{elb_sec_grp.group_id}}"
           - proto: tcp
             from_port: 22
             to_port: 22
             group_id: "{{bashionHost_grp}}"
      register: ec2_sec_grp

    - name: update ec2 security group for instances
      ec2_group:
         name: ec2_sec
         description: ec2 security group
         vpc_id: "{{vpc_id}}"
         region: "{{region}}"
         purge_rules: no
         rules:
           - proto: all
             group_id: "{{ec2_sec_grp.group_id}}"
      register: ec2_sec_grp

    - name: create ngninx instance
      ec2:
        key_name: stack_keypair
        region: "{{region}}"
        vpc_subnet_id: "{{private_sub1}}"
        instance_type: t2.micro
        image: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "web01"
        exact_count: 1
        count_tag:
          Name: "web01"
        group_id: "{{ec2_sec_grp.group_id}}"
      register: web01_instance

    - name: create app instance
      ec2:
        key_name: stack_keypair
        region: "{{region}}"
        vpc_subnet_id: "{{private_sub1}}"
        instance_type: t2.micro
        image: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "app01"
        exact_count: 1
        count_tag:
          Name: "app01"
        group_id: "{{ec2_sec_grp.group_id}}"
      register: app01_instance

    - name: create rabbitmq instance
      ec2:
        key_name: stack_keypair
        region: "{{region}}"
        vpc_subnet_id: "{{private_sub1}}"
        instance_type: t2.micro
        image: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "rmq01"
        exact_count: 1
        count_tag:
          Name: "rmq01"
        group_id: "{{ec2_sec_grp.group_id}}"
      register: rmq01_instance
    - name: create memcache instance
      ec2:
        key_name: stack_keypair
        region: "{{region}}"
        vpc_subnet_id: "{{private_sub1}}"
        instance_type: t2.micro
        image: "{{memcache_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "mc01"
        exact_count: 1
        count_tag:
          Name: "mc01"
        group_id: "{{ec2_sec_grp.group_id}}"
      register: mc01_instance

    - name: create mysql instance
      ec2:
        key_name: stack_keypair
        region: "{{region}}"
        vpc_subnet_id: "{{private_sub1}}"
        instance_type: t2.micro
        image: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "db01"
        exact_count: 1
        count_tag:
          Name: "db01"
        group_id: "{{ec2_sec_grp.group_id}}"
      register: db01_instance

    - local_action:
        module: ec2_elb_lb
        name: "test-vpc"
        scheme: internal
        state: present
        region: "{{region}}"
        instance_ids:
           - "{{web01_instance.tagged_instances[0].id}}"
        security_group_ids: "{{elb_sec_grp.group_id}}"
        purge_instance_ids: true
        subnets:
           - "{{public_sub1}}"
           - "{{public_sub2}}"
           - "{{public_sub3}}"
        listeners:
           - protocol: http # options are http, https, ssl, tcp
             load_balancer_port: 80
             instance_port: 80

    - name: Insert/Update "Match User" configuration block in /etc/ssh/sshd_config
      blockinfile:
        path: provision_stack/group_vars/hostips
        block: |
          web01_private_ip: {{web01_instance.tagged_instances[0].private_ip}}
          app01_private_ip: {{app01_instance.tagged_instances[0].private_ip}}
          rmq01_private_ip: {{rmq01_instance.tagged_instances[0].private_ip}}
          mc01_private_ip: {{mc01_instance.tagged_instances[0].private_ip}}
          db01_private_ip: {{db01_instance.tagged_instances[0].private_ip}}

    - name: copy ec2 instances login key pair
      copy:
        content: vpcstack_keypair.pem
        dest: vpcstack_keypair.pem
        mode: 0600

    - name: create inventory file with all hosts
      blockinfile:
        path: provision_stack/inventorypro
        block: |
           web01 ansible_host="{{web01_instance.tagged_instances[0].private_ip}}"
           app01 ansible_host="{{app01_instance.tagged_instances[0].private_ip}}"
           rmq01 ansible_host="{{rmq01_instance.tagged_instances[0].private_ip}}"
           mc01  ansible_host="{{mc01_instance.tagged_instances[0].private_ip}}"
           db01  ansible_host="{{db01_instance.tagged_instances[0].private_ip}}"
           ctrl01 ansible_host=127.0.0.1 ansible_connection=local

           [dbsrvgrp]
           db01

           [rmqsrvgrp]
           rmq01

           [mcsrvgrp]
           mc01

           [websrvgrp]
           web01

           [appsrvgrp]
           app01

           [ctrlgrp]
           ctrl01

           [stack_instance:children]
           appsrvgrp
           dbsrvgrp
           rmqsrvgrp
           mcsrvgrp
           websrvgrp
           ctrlgrp

           [stack_instance:vars]
           ansible_user=ubuntu
           ansible_ssh_private_key_file=vpcstack_keypair.pem
